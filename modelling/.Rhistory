geom_line(data = data,
aes(x=monthyear,y=estimate,group=origin_destination_class,colour=component),
size = 1) +
geom_ribbon(data = data,
aes(x=monthyear,ymin=(ci_lower), ymax=(ci_upper),group=origin_destination_class),
alpha=0.35) +
scale_color_viridis_d(begin=0,end=1,option = "C")+
scale_x_date(date_labels = "%b",
date_breaks = "1 months", #breaks = c("Mar", "Jun", "Sep", "Dec"),
limits = c(as.Date("2020-03-01"), as.Date("2021-08-01"))
)+
theme_minimal()+
labs(y="Regression Coefficients",color="Covariates Components",fill="Timeline")+
theme(axis.title.x = element_blank(),text = element_text(size=14),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),text=element_text(family = "Times New Roman"))
g
g<-ggplot()+
geom_rect(
aes(xmin = as.Date(start), xmax = as.Date(end), fill = name),
ymin = -Inf, ymax = Inf, alpha = 0.3,
data = timeline
) +
scale_fill_manual(values = c("#D091BB","#E7F7D5","#D091BB","#B3589A","#9BBF85"))+
geom_line(data = data,
aes(x=monthyear,y=estimate,group=origin_destination_class,colour=component),
size = 1) +
geom_ribbon(data = data,
aes(x=monthyear,ymin=(ci_lower), ymax=(ci_upper),group=origin_destination_class),
alpha=0.35) +
scale_color_viridis_d(begin=0,end=1,option = "C")+
scale_x_date(date_labels = "%b",
date_breaks = "1 months", #breaks = c("Mar", "Jun", "Sep", "Dec"),
limits = c(as.Date("2020-03-01"), as.Date("2021-08-01"))
)+
theme_minimal()+
labs(y="Regression Coefficients",color="Covariates Components",fill="Timeline")+
theme(axis.title.x = element_blank(),text = element_text(size=14,family = "Times New Roman"),panel.grid.major = element_blank(),panel.grid.minor = element_blank())
g
data<-data %>%
mutate(
component=case_when(
origin_destination_class=="day"~"Time",
origin_destination_class=="hour 08"~"Time",
origin_destination_class=="hour 16"~"Time",
origin_destination_class=="wdWeekend"~"Time",
origin_destination_class=="z_d"~"Distance",
origin_destination_class=="z_origin_pop"~"OD Population",
origin_destination_class=="z_destination_pop"~"Population",
origin_destination_class=="z_score"~"Quality Score"
)
)
g<-ggplot()+
geom_rect(
aes(xmin = as.Date(start), xmax = as.Date(end), fill = name),
ymin = -Inf, ymax = Inf, alpha = 0.3,
data = timeline
) +
scale_fill_manual(values = c("#D091BB","#E7F7D5","#D091BB","#B3589A","#9BBF85"))+
geom_line(data = data,
aes(x=monthyear,y=estimate,group=origin_destination_class,colour=component),
size = 1) +
geom_ribbon(data = data,
aes(x=monthyear,ymin=(ci_lower), ymax=(ci_upper),group=origin_destination_class),
alpha=0.35) +
scale_color_viridis_d(begin=0,end=1,option = "C")+
scale_x_date(date_labels = "%b",
date_breaks = "1 months", #breaks = c("Mar", "Jun", "Sep", "Dec"),
limits = c(as.Date("2020-03-01"), as.Date("2021-08-01"))
)+
theme_minimal()+
labs(y="Regression Coefficients",color="Covariates Components",fill="Timeline")+
theme(axis.title.x = element_blank(),text = element_text(size=14,family = "Times New Roman"),panel.grid.major = element_blank(),panel.grid.minor = element_blank())
png("~/glm-nod_coefficients.png",units="in", width=15, height=10, res=300)
g
dev.off()
data<-data %>%
mutate(
component=case_when(
origin_destination_class=="day"~"Time",
origin_destination_class=="hour 08"~"Time",
origin_destination_class=="hour 16"~"Time",
origin_destination_class=="wdWeekend"~"Time",
origin_destination_class=="z_d"~"Distance",
origin_destination_class=="z_origin_pop"~"OD Population",
origin_destination_class=="z_destination_pop"~"OD Population",
origin_destination_class=="z_score"~"Quality Score"
)
)
g<-ggplot()+
geom_rect(
aes(xmin = as.Date(start), xmax = as.Date(end), fill = name),
ymin = -Inf, ymax = Inf, alpha = 0.3,
data = timeline
) +
scale_fill_manual(values = c("#D091BB","#E7F7D5","#D091BB","#B3589A","#9BBF85"))+
geom_line(data = data,
aes(x=monthyear,y=estimate,group=origin_destination_class,colour=component),
size = 1) +
geom_ribbon(data = data,
aes(x=monthyear,ymin=(ci_lower), ymax=(ci_upper),group=origin_destination_class),
alpha=0.35) +
scale_color_viridis_d(begin=0,end=1,option = "C")+
scale_x_date(date_labels = "%b",
date_breaks = "1 months", #breaks = c("Mar", "Jun", "Sep", "Dec"),
limits = c(as.Date("2020-03-01"), as.Date("2021-08-01"))
)+
theme_minimal()+
labs(y="Regression Coefficients",color="Covariates Components",fill="Timeline")+
theme(axis.title.x = element_blank(),text = element_text(size=14,family = "Times New Roman"),panel.grid.major = element_blank(),panel.grid.minor = element_blank())
g<-ggplot()+
geom_rect(
aes(xmin = as.Date(start), xmax = as.Date(end), fill = name),
ymin = -Inf, ymax = Inf, alpha = 0.3,
data = timeline
) +
scale_fill_manual(values = c("#D091BB","#E7F7D5","#D091BB","#B3589A","#9BBF85"))+
geom_line(data = data,
aes(x=monthyear,y=estimate,group=origin_destination_class,colour=component),
size = 1) +
geom_ribbon(data = data,
aes(x=monthyear,ymin=(ci_lower), ymax=(ci_upper),group=origin_destination_class),
alpha=0.35) +
scale_color_viridis_d(begin=0,end=1,option = "C")+
scale_x_date(date_labels = "%b",
date_breaks = "1 months", #breaks = c("Mar", "Jun", "Sep", "Dec"),
limits = c(as.Date("2020-03-01"), as.Date("2021-08-01"))
)+
theme_minimal()+
labs(y="Regression Coefficients",color="Covariates Components",fill="Timeline")+
theme(axis.title.x = element_blank(),text = element_text(size=18,family = "Times New Roman"),panel.grid.major = element_blank(),panel.grid.minor = element_blank())
png("~/glm-nod_coefficients.png",units="in", width=15, height=10, res=300)
g
dev.off()
data
View(data)
View(coefficients_NOD)
summary(data[!(data$origin_destination_class=="z_d"),])
summary(data[data$origin_destination_class=="z_d",])
esd<-paste(round(data$estimate,2), " (",round(data$std_error,2),")",sep = "")
esd<-paste(round(data$estimate,2), " (",round(data$std_error,4),")",sep = "")
esd<-paste(round(data$estimate,2), " (",round(data$std_error,5),")",sep = "")
esd<-paste(round(data$estimate,2), " (",round(data$std_error,6),")",sep = "")
rn <-data$monthyear
format_ISO8601(rn, precision = "ym")
rn=ormat_ISO8601(rn, precision = "ym")
rn=format_ISO8601(rn, precision = "ym")
cn<-unique(data$origin_destination_class)
tab <- matrix(esd,8,18,dimnames=list(rn,cn))
tab <- matrix(esd,18,8,dimnames=list(rn,cn))
rn <-unique(data$monthyear)
rn=format_ISO8601(rn, precision = "ym")
tab <- matrix(esd,18,8,dimnames=list(rn,cn))
View(tab)
esd<-paste(round(data$estimate,4), " (",round(data$std_error,6),")",sep = "")
tab <- matrix(esd,18,8,dimnames=list(rn,cn))
View(tab)
xtable(tab)
library(xtable)
xtable(tab)
#standard goodness of fit stats: residual deviance, chi-square test, Akaike, Pseudo-R2
#standard overall stats: number of observations, df, log-likelihood
diagnostics<-NULL
for (i in 1:18){
filename<-paste0("~/Projects/ITINERANT/modelling_output/v2/m_",i,".rds")
m<-readRDS(filename)
month<-m$data[1,]$monthyear
residual_deviance<-m$deviance
#p_chi_test<-pchisq(m$deviance, df = m$df.residual, lower.tail=FALSE) #P[X > x]
Akaike<-AIC(m)
pseudo_r<-1-(m$deviance/m$null.deviance)
n_obs<-nrow(m$data)
df<-df.residual(m)
logLik<-as.data.frame(logLik(m))$`c(x)`
d<-data.frame(month,residual_deviance,p_chi_test,Akaike,pseudo_r,n_obs,df,logLik)
diagnostics<-rbind(diagnostics,d)
print(i)
}
for (i in 1:18){
filename<-paste0("~/Projects/ITINERANT/modelling_output/v2/m_",i,".rds")
m<-readRDS(filename)
month<-m$data[1,]$monthyear
residual_deviance<-m$deviance
#p_chi_test<-pchisq(m$deviance, df = m$df.residual, lower.tail=FALSE) #P[X > x]
Akaike<-AIC(m)
pseudo_r<-1-(m$deviance/m$null.deviance)
n_obs<-nrow(m$data)
df<-df.residual(m)
logLik<-as.data.frame(logLik(m))$`c(x)`
d<-data.frame(month,residual_deviance,Akaike,pseudo_r,n_obs,df,logLik)
diagnostics<-rbind(diagnostics,d)
print(i)
}
diagnostics %>%
mutate(month=format_ISO8601(diagnostics$month, precision = "ym"))%>%
kbl(caption="Poisson Regression Monthly Models Diagnostics.",
format= "latex",
col.names = c("Month-Year","Residual Deviance","Akaike","Pseudo R squared","Number of Obs.","Degrees of Freedom","Log-Likelihood"),
align="r") %>%
kable_classic(full_width = F, html_font = "times new roman")
library(kableExtra)
diagnostics %>%
mutate(month=format_ISO8601(diagnostics$month, precision = "ym"))%>%
kbl(caption="Poisson Regression Monthly Models Diagnostics.",
format= "latex",
col.names = c("Month-Year","Residual Deviance","Akaike","Pseudo R squared","Number of Obs.","Degrees of Freedom","Log-Likelihood"),
align="r") %>%
kable_classic(full_width = F, html_font = "times new roman")
library(AER)
for (i in 1:18){
filename<-paste0("~/Projects/ITINERANT/modelling_output/v2/m_",i,".rds")
m<-readRDS(filename)
print(dispersiontest(m))
}
?dispersiontest
library(AER)
for (i in 1:18){
filename<-paste0("~/Projects/ITINERANT/modelling_output/v2/m_",i,".rds")
m<-readRDS(filename)
print(dispersiontest(m, trafo = 1))
}
for (i in 1:18){
filename<-paste0("~/Projects/ITINERANT/modelling_output/v2/m_",i,".rds")
m<-readRDS(filename)
print(monthyear[i])
print(dispersiontest(m, trafo = 1))
}
for (i in 1:18){
filename<-paste0("~/Projects/ITINERANT/modelling_output/v2/m_",i,".rds")
m<-readRDS(filename)
print(monthyear[i])
print(dispersiontest(m))
}
data<-coefficients_NOD[!(coefficients_NOD$origin_destination_class=="(Intercept)"),]
esd<-paste(round(data$estimate,3), " (",round(data$std_error,6),")",sep = "")
rn <-unique(data$monthyear)
rn=format_ISO8601(rn, precision = "ym")
cn<-unique(data$origin_destination_class)
tab <- matrix(esd,18,8,dimnames=list(rn,cn))
library(xtable)
xtable(tab)
#standard goodness of fit stats: residual deviance, chi-square test, Akaike, Pseudo-R2
#standard overall stats: number of observations, df, log-likelihood
diagnostics<-NULL
for (i in 1:18){
filename<-paste0("~/Projects/ITINERANT/modelling_output/v2/m_",i,".rds")
m<-readRDS(filename)
month<-m$data[1,]$monthyear
residual_deviance<-m$deviance
#p_chi_test<-pchisq(m$deviance, df = m$df.residual, lower.tail=FALSE) #P[X > x]
Akaike<-AIC(m)
pseudo_r<-round(1-(m$deviance/m$null.deviance),3)
n_obs<-nrow(m$data)
df<-df.residual(m)
logLik<-as.data.frame(logLik(m))$`c(x)`
d<-data.frame(month,residual_deviance,Akaike,pseudo_r,n_obs,df,logLik)
diagnostics<-rbind(diagnostics,d)
print(i)
}
diagnostics %>%
mutate(month=format_ISO8601(diagnostics$month, precision = "ym"))%>%
kbl(caption="Poisson Regression Monthly Models Diagnostics.",
format= "latex",
col.names = c("Month-Year","Residual Deviance","Akaike","Pseudo R squared","Number of Obs.","Degrees of Freedom","Log-Likelihood"),
align="r") %>%
kable_classic(full_width = F, html_font = "times new roman")
diagnostics %>%
mutate(month=format_ISO8601(diagnostics$month, precision = "ym"))%>%
kbl(caption="Poisson Regression Monthly Models Diagnostics.",
format= "latex",
col.names = c("Month-Year","Residual Deviance","Akaike","Pseudo R squared","Number of Obs.","Degrees of Freedom","Log-Likelihood"),
align="r") %>%
kable_classic(full_width = F, html_font = "times new roman")
library(sf)
grid<-st_read("~/Projects/ITINERANT/grid_w_classes.gpkg")
knitr::opts_chunk$set(echo = TRUE)
grid_viz<-grid %>%
st_drop_geometry()%>%
select(pop_density,decile,class) %>%
tidyr::pivot_longer(-c(pop_density),names_to = "type",values_to = "class") %>%
mutate(
type=factor(type,levels = c("decile","class"),labels = c("Decile", "Adj. Decile"))
)
ggplot(data = grid_viz, aes(x=class,y=pop_density,fill=class,colour=class)) +
scale_fill_viridis_d( option = "D") +
#scale_color_viridis_d( option = "D") +
coord_cartesian(ylim =  c(0, 50))+
#geom_violin(alpha=0.4, size = 0.5) +
geom_boxplot(notch = F, outlier.size = -1, width = 0.5, alpha = 0.5, color="gray",size=0.2) +
geom_point(shape = 21, size = 0.2, alpha = 0.5,color="black") +
theme_tufte() +
theme(legend.position = "none",
axis.text = element_text(size = 16),
axis.title=element_text(size=18),
strip.text = element_text(size=18)
) +
labs(y="Persons per hectare",x="Population Density Class")+
facet_wrap(~type)
ggplot(data = grid_viz, aes(x=class,y=pop_density,fill=class,colour=class)) +
scale_fill_viridis_d( option = "D") +
#scale_color_viridis_d( option = "D") +
coord_cartesian(ylim =  c(0, 50))+
#geom_violin(alpha=0.4, size = 0.5) +
geom_boxplot(notch = F, outlier.size = -1, width = 0.5, alpha = 0.5, color="gray",size=0.2) +
geom_point(shape = 21, size = 0.2, alpha = 0.5,color="black") +
theme_tufte() +
theme(legend.position = "none",
axis.text = element_text(size = 16),
axis.title=element_text(size=18),
strip.text = element_text(size=18)
) +
labs(y="Persons per hectare",x="Population Density Class")+
facet_wrap(~type)
ggsave("~/fb_paper_graphics/pop_classes.jpg",height=15, width=30, units="cm",bg="white",dpi=300)
grid$class<-factor(grid$class,levels = c("1","2","3","4","5","6","7","8","9","10"))
grid$decile<-factor(grid$decile,levels = c("1","2","3","4","5","6","7","8","9","10"))
grid_viz<-grid %>%
st_drop_geometry()%>%
select(pop_density,decile,class) %>%
tidyr::pivot_longer(-c(pop_density),names_to = "type",values_to = "class") %>%
mutate(
type=factor(type,levels = c("decile","class"),labels = c("Decile", "Adj. Decile"))
)
ggplot(data = grid_viz, aes(x=class,y=pop_density,fill=class,colour=class)) +
scale_fill_viridis_d( option = "D") +
#scale_color_viridis_d( option = "D") +
coord_cartesian(ylim =  c(0, 50))+
#geom_violin(alpha=0.4, size = 0.5) +
geom_boxplot(notch = F, outlier.size = -1, width = 0.5, alpha = 0.5, color="gray",size=0.2) +
geom_point(shape = 21, size = 0.2, alpha = 0.5,color="black") +
theme_tufte() +
theme(legend.position = "none",
axis.text = element_text(size = 16),
axis.title=element_text(size=18),
strip.text = element_text(size=18)
) +
labs(y="Persons per hectare",x="Population Density Class")+
facet_wrap(~type)
ggplot(data = grid_viz, aes(x=class,y=pop_density,fill=class,colour=class)) +
scale_fill_viridis_d( option = "D") +
#scale_color_viridis_d( option = "D") +
coord_cartesian(ylim =  c(0, 80))+
#geom_violin(alpha=0.4, size = 0.5) +
geom_boxplot(notch = F, outlier.size = -1, width = 0.5, alpha = 0.5, color="gray",size=0.2) +
geom_point(shape = 21, size = 0.2, alpha = 0.5,color="black") +
theme_tufte() +
theme(legend.position = "none",
axis.text = element_text(size = 16),
axis.title=element_text(size=18),
strip.text = element_text(size=18)
) +
labs(y="Persons per hectare",x="Population Density Class")+
facet_wrap(~type)
ggplot(data = grid_viz, aes(x=class,y=pop_density,fill=class,colour=class)) +
scale_fill_viridis_d( option = "D") +
#scale_color_viridis_d( option = "D") +
coord_cartesian(ylim =  c(0, 80))+
#geom_violin(alpha=0.4, size = 0.5) +
geom_boxplot(notch = F, outlier.size = -1, width = 0.5, alpha = 0.5, color="gray",size=0.2) +
geom_point(shape = 21, size = 0.2, alpha = 0.5,color="black") +
theme_tufte() +
theme(legend.position = "none",
axis.text = element_text(size = 16),
axis.title=element_text(size=18),
strip.text = element_text(size=18)
) +
labs(y="Persons per hectare",x="Population Density Class")+
facet_wrap(~type)
grid$pop_density<-grid$Population/as.numeric(grid$area))*10000
grid$pop_density<-(grid$Population/as.numeric(grid$area))*10000
ggplot(data = grid_viz, aes(x=class,y=pop_density,fill=class,colour=class)) +
scale_fill_viridis_d( option = "D") +
#scale_color_viridis_d( option = "D") +
coord_cartesian(ylim =  c(0, 80))+
#geom_violin(alpha=0.4, size = 0.5) +
geom_boxplot(notch = F, outlier.size = -1, width = 0.5, alpha = 0.5, color="gray",size=0.2) +
geom_point(shape = 21, size = 0.2, alpha = 0.5,color="black") +
theme_tufte() +
theme(legend.position = "none",
axis.text = element_text(size = 16),
axis.title=element_text(size=18),
strip.text = element_text(size=18)
) +
labs(y="Persons per hectare",x="Population Density Class")+
facet_wrap(~type)
summary(grid$pop_density)
View(grid)
grid<-st_read("~/Projects/ITINERANT/FBgridPop.gpkg")
grid<-grid %>%
mutate(area=sf::st_area(grid),
pop_density=(Population/as.numeric(area))*10000,
log_pop=log(Population+0.001)) #hectars
grid <- grid %>%
mutate(
decile= factor(ntile(pop_density,10),levels = c("1","2","3","4","5","6","7","8","9","10"))
)
grid<-grid %>%
mutate(
class=case_when(
class %in% c("1","2","3","4") ~ 1,
class=="5" ~ 2,
class=="6" ~ 3,
class=="7" ~ 4,
class=="8" ~ 5,
class=="9" ~ 6,
class=="10_1" ~ 7,
class=="10_2" ~ 8,
class=="10_3" ~ 9,
class=="10_4" ~ 10
)
)
library(tidyverse)
grid<-grid %>%
mutate(
class=case_when(
class %in% c("1","2","3","4") ~ 1,
class=="5" ~ 2,
class=="6" ~ 3,
class=="7" ~ 4,
class=="8" ~ 5,
class=="9" ~ 6,
class=="10_1" ~ 7,
class=="10_2" ~ 8,
class=="10_3" ~ 9,
class=="10_4" ~ 10
)
)
urban<-grid[grid$decile==10,]
urban$class<-paste0("10_",ntile(urban$pop_density,4))
rural<-grid[grid$decile!=10,]
rural$class<-rural$decile
grid<-rbind(urban,rural)
remove(urban,rural)
grid<-grid %>%
mutate(
class=case_when(
class %in% c("1","2","3","4") ~ 1,
class=="5" ~ 2,
class=="6" ~ 3,
class=="7" ~ 4,
class=="8" ~ 5,
class=="9" ~ 6,
class=="10_1" ~ 7,
class=="10_2" ~ 8,
class=="10_3" ~ 9,
class=="10_4" ~ 10
)
)
grid$class<-factor(grid$class,levels = c("1","2","3","4","5","6","7","8","9","10"))
grid$decile<-factor(grid$decile,levels = c("1","2","3","4","5","6","7","8","9","10"))
grid %>%
st_drop_geometry()%>%
select(pop_density,decile,class) %>%
tidyr::pivot_longer(-c(pop_density),names_to = "type",values_to = "class") %>%
ggplot(aes(x=class,y=pop_density))+
geom_violin(width=0.15,outlier.shape = NA)+
coord_cartesian(ylim =  c(0, 500))+
theme_bw()+
facet_wrap(~type)
grid_viz<-grid %>%
st_drop_geometry()%>%
select(pop_density,decile,class) %>%
tidyr::pivot_longer(-c(pop_density),names_to = "type",values_to = "class") %>%
mutate(
type=factor(type,levels = c("decile","class"),labels = c("Decile", "Adj. Decile"))
)
ggplot(data = grid_viz, aes(x=class,y=pop_density,fill=class,colour=class)) +
scale_fill_viridis_d( option = "D") +
#scale_color_viridis_d( option = "D") +
coord_cartesian(ylim =  c(0, 80))+
#geom_violin(alpha=0.4, size = 0.5) +
geom_boxplot(notch = F, outlier.size = -1, width = 0.5, alpha = 0.5, color="gray",size=0.2) +
geom_point(shape = 21, size = 0.2, alpha = 0.5,color="black") +
theme_tufte() +
theme(legend.position = "none",
axis.text = element_text(size = 16),
axis.title=element_text(size=18),
strip.text = element_text(size=18)
) +
labs(y="Persons per hectare",x="Population Density Class")+
facet_wrap(~type)
ggplot(data = grid_viz, aes(x=class,y=pop_density,fill=class,colour=class)) +
scale_fill_viridis_d( option = "D") +
#scale_color_viridis_d( option = "D") +
coord_cartesian(ylim =  c(0, 50))+
#geom_violin(alpha=0.4, size = 0.5) +
geom_boxplot(notch = F, outlier.size = -1, width = 0.5, alpha = 0.5, color="gray",size=0.2) +
geom_point(shape = 21, size = 0.2, alpha = 0.5,color="black") +
theme_tufte() +
theme(legend.position = "none",
axis.text = element_text(size = 16),
axis.title=element_text(size=18),
strip.text = element_text(size=18)
) +
labs(y="Persons per hectare",x="Population Density Class")+
facet_wrap(~type)
ggsave("~/fb_paper_graphics/pop_classes.jpg",height=15, width=30, units="cm",bg="white",dpi=300)
```
ggplot(data = grid_viz, aes(x=class,y=pop_density,fill=class,colour=class)) +
scale_fill_viridis_d( option = "D") +
#scale_color_viridis_d( option = "D") +
coord_cartesian(ylim =  c(0, 50))+
#geom_violin(alpha=0.4, size = 0.5) +
geom_boxplot(notch = F, outlier.size = -1, width = 0.5, alpha = 0.5, color="gray",size=0.2) +
geom_point(shape = 21, size = 0.2, alpha = 0.5,color="black") +
theme_tufte() +
theme(legend.position = "none",
axis.text = element_text(size = 16),
axis.title=element_text(size=18),
strip.text = element_text(size=18)
) +
labs(y="Persons per hectare",x="Population Density Class")+
facet_wrap(~type)
ggsave("~/fb_paper_graphics/pop_classes.jpg",height=15, width=30, units="cm",bg="white",dpi=300)
